// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreTypes.h"
#include "Containers/Array.h"
#include "IMediaTextureSample.h"
#include "MediaObjectPool.h"
#include "MediaSampleQueue.h"
#include "Math/IntPoint.h"
#include "Misc/Timespan.h"


/**
 * Texture sample generated by FFmpegMedia player.
 * 参考文档: https://docs.unrealengine.com/4.27/en-US/API/Runtime/Media/IMediaTextureSample/
 * 媒体纹理样本接口
 *    媒体纹理样式是通过media player生成，并且发送到这个媒体纹理注册池。它们包括了一帧纹理数据，
 * 以及额外的元数据，例如维度、时间代码和持续时间。
 * 
 */
class FFFmpegMediaTextureSample
	: public IMediaTextureSample
	, public IMediaPoolable
{
public:

	/** Default constructor. */
	FFFmpegMediaTextureSample()
		: Dim(FIntPoint::ZeroValue)
		, Duration(FTimespan::Zero())
		, OutputDim(FIntPoint::ZeroValue)
		, SampleFormat(EMediaTextureSampleFormat::Undefined)
		, Stride(0)
		, Time(FTimespan::Zero())
	{ }

	/** Virtual destructor. */
	virtual ~FFFmpegMediaTextureSample() { }

public:

	/**
	 * Initialize the sample.
	 * 初始化样本
	 * @param InBuffer The sample's data buffer.
	 * @param InSize Size of the buffer.
	 * @param InDim The sample buffer's width and height (in pixels).
	 * @param InStride Number of bytes per pixel row.
	 * @param InTime The sample time (relative to presentation clock).
	 * @param InDuration The duration for which the sample is valid.
	 */
	///10.24 xhk 添加了index参数 用于在seek的时候精准返回需要的帧
	bool Initialize(
		const void* InBuffer,
		uint32 InSize,
		const FIntPoint& InDim,
		uint32 InStride,
		FMediaTimeStamp InTime,
		FTimespan InDuration,
		int64 index = 0)
	{
		//校验数据是否正确
		if ((InBuffer == nullptr) || (InSize == 0) || (InStride == 0))
		{
			return false;
		}

		//校验计算的字节数与给定的字节数是否正确
		if ((InStride * InDim.Y) > InSize)
		{
			return false;
		}

		//重新设置数据缓存
		Buffer.Reset(InSize);
		Buffer.Append((uint8*)InBuffer, InSize);
		//设置时长
		Duration = InDuration;
		//设置高度和宽度
		Dim = InDim;
		//设置样本格式
		SampleFormat = EMediaTextureSampleFormat::CharBGRA;
		//设置每行像素字节数
		Stride = InStride;
		//设置显示时间(pts)
		Time = InTime;
		Time.SequenceIndex = index;
		return true;
	}

public:

	//~ IMediaTextureSample interface
	/** 获取样本帧缓冲数据 */
	virtual const void* GetBuffer() override
	{
		return Buffer.GetData();
	}
	/** 获取样本高度和宽度 */
	virtual FIntPoint GetDim() const override
	{
		return Dim;
	}
	
	/** 获取样本时长 */
	virtual FTimespan GetDuration() const override
	{
		return Duration;
	}

	/** 获取样本格式 */
	virtual EMediaTextureSampleFormat GetFormat() const override
	{
		return SampleFormat;
	}

	/** 获取样本输出高度和宽度 */
	virtual FIntPoint GetOutputDim() const override
	{
		//todo: 当前直接返回输入的高度和宽度
		return Dim;
	}

	/** 获取每行像素字节数 */
	virtual uint32 GetStride() const override
	{
		return Stride;
	}

#if WITH_ENGINE
	virtual FRHITexture* GetTexture() const override
	{
		return nullptr;
	}
#endif //WITH_ENGINE

	/** 获取显示时间(pts) */
	virtual FMediaTimeStamp GetTime() const override
	{
		return Time;
	}

	/** 是否支持缓存 */
	virtual bool IsCacheable() const override
	{
		return true;
	}

	/** 是否输出到srgb色彩空间中 */
	virtual bool IsOutputSrgb() const override
	{
		return true;
	}

private:

	/** The sample's data buffer. 样本数据缓冲 */
	TArray<uint8> Buffer;

	/** Width and height of the texture sample. 样本数据的高度和宽度*/
	FIntPoint Dim;

	/** Duration for which the sample is valid. 样本时长*/
	FTimespan Duration;

	/** Width and height of the output. 样本输出的高度和宽度*/
	FIntPoint OutputDim;

	/** The sample format. 样本格式*/
	EMediaTextureSampleFormat SampleFormat;

	/** Number of bytes per pixel row. 每行像素字节数 */
	uint32 Stride;

	/** Presentation for which the sample was generated. 样本显示时间(pts)*/
	FMediaTimeStamp Time;
	
};


/** Implements a pool for FFmpeg texture samples. 实现FFmpeg纹理样本池 */
class FFFmpegMediaTextureSamplePool : public TMediaObjectPool<FFFmpegMediaTextureSample> { };
